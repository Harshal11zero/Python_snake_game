import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 480
SCREEN_HEIGHT = 480
GRID_SIZE = 20
GRID_WIDTH = SCREEN_WIDTH // GRID_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // GRID_SIZE
FPS = 10

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

# Snake class
class Snake:
    def __init__(self):
        self.length = 1
        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]
        self.direction = random.choice([pygame.K_UP, pygame.K_DOWN, pygame.K_LEFT, pygame.K_RIGHT])
        self.color = Aqua
        self.score = 0
        self.food_position = self.random_food_position()

    def get_head_position(self):
        return self.positions[0]

    def random_food_position(self):
        x = random.randint(0, GRID_WIDTH - 1) * GRID_SIZE
        y = random.randint(0, GRID_HEIGHT - 1) * GRID_SIZE
        return (x, y)

    def handle_keys(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and self.direction != pygame.K_DOWN:
                    self.direction = pygame.K_UP
                elif event.key == pygame.K_DOWN and self.direction != pygame.K_UP:
                    self.direction = pygame.K_DOWN
                elif event.key == pygame.K_LEFT and self.direction != pygame.K_RIGHT:
                    self.direction = pygame.K_LEFT
                elif event.key == pygame.K_RIGHT and self.direction != pygame.K_LEFT:
                    self.direction = pygame.K_RIGHT

    def move(self):
        head_pos = self.get_head_position()
        x, y = head_pos

        if self.direction == pygame.K_UP:
            new_head_pos = (x, y - GRID_SIZE)
        elif self.direction == pygame.K_DOWN:
            new_head_pos = (x, y + GRID_SIZE)
        elif self.direction == pygame.K_LEFT:
            new_head_pos = (x - GRID_SIZE, y)
        elif self.direction == pygame.K_RIGHT:
            new_head_pos = (x + GRID_SIZE, y)

        self.positions.insert(0, new_head_pos)

        if self.get_head_position() == self.food_position:
            self.length += 1
            self.score += 1
            self.food_position = self.random_food_position()
        else:
            self.positions.pop()

    def draw(self, surface):
        for p in self.positions:
            pygame.draw.rect(surface, self.color, (p[0], p[1], GRID_SIZE, GRID_SIZE))
        pygame.draw.rect(surface, RED, (self.food_position[0], self.food_position[1], GRID_SIZE, GRID_SIZE))

    def check_collision(self):
        if (
            self.get_head_position() in self.positions[1:] or
            self.get_head_position()[0] < 0 or
            self.get_head_position()[1] < 0 or
            self.get_head_position()[0] >= SCREEN_WIDTH or
            self.get_head_position()[1] >= SCREEN_HEIGHT
        ):
            return True
        return False

# Main function
def main():
    clock = pygame.time.Clock()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), 0, 32)
    pygame.display.set_caption('Snake Game')
    snake = Snake()

    while True:
        snake.handle_keys()
        snake.move()

        if snake.check_collision():
            pygame.quit()
            sys.exit()

        screen.fill(BLACK)
        snake.draw(screen)
        pygame.display.update()
        clock.tick(FPS)

if __name__ == '__main__':
    main()
